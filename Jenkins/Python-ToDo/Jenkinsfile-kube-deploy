pipeline {
    agent {label 'python-todo'}

    environment {
        REPO_URL = 'https://github.com/kjakedev/PCC-DevOps-Bootcamp'
        REPO_DIR = '/home/ubuntu/PCC-DevOps-Bootcamp'
        DOCKER_IMAGE = 'kevinjake/pcc-python-todo-sample-app'
        DOCKER_TAG = "${currentBuild.number}"
        DOCKER_LATEST_TAG = 'latest'
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-credentials'
    }

    stages {
        stage('Checkout') {
            steps {
                dir("${REPO_DIR}") {
                    git url: "${REPO_URL}"
                    // sh "git pull --origin master"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir("${REPO_DIR}/Jenkins/Python-ToDo") {
                    sh 'docker build -q -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
                    sh 'docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:${DOCKER_LATEST_TAG}'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS_ID}", usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh 'echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin'
                        sh 'docker push ${DOCKER_IMAGE}:${DOCKER_TAG}'
                        sh 'docker push ${DOCKER_IMAGE}:${DOCKER_LATEST_TAG}'
                    }
                }
            }

        stage('Deploy to Kubernetes Cluster') {
            agent { label 'bastion-host' }
            steps {
                agent {label 'bastion-host'}
                script {
                    sh 'kubectl set image deployment/python-todo-app python-todo-app=${DOCKER_IMAGE}:${DOCKER_TAG} --record'
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            sh 'docker system prune -af'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
