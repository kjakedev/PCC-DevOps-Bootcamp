pipeline {
  agent any
  parameters {
    choice (name: 'chooseNode', choices: ['Green', 'Blue'], description: 'Choose which Environment to Deploy: ')
  }
  environment {
    listenerARN = 'arn:aws:elasticloadbalancing:us-east-1:773314055569:listener/app/blue-green-alb/e66a44af6d7d6725/7cb9646d02d73693'
    blueARN = 'arn:aws:elasticloadbalancing:us-east-1:773314055569:targetgroup/blue-tg/fda570ba9fa0ba4b'
    greenARN = 'arn:aws:elasticloadbalancing:us-east-1:773314055569:targetgroup/green-tg/e41e1918562904c9'
    REPO_URL = 'https://github.com/kjakedev/PCC-DevOps-Bootcamp'
    REPO_DIR = '/home/ec2-user/PCC-DevOps-Bootcamp'
    AWS_CREDENTIALS_ID = 'aws-credentials'
  }
    stages {
        stage('Deployment Started') {
            matrix {
                axes {
                    axis {
                        name 'NodeSelection'
                        values 'Green', 'Blue'
                    }
                }
                stages {
                    stage('Configure Listener') {
                        when {
                            expression {
                                params.chooseNode == 'Green' && NodeSelection == 'Green' ||
                                params.chooseNode == 'Blue' && NodeSelection == 'Blue'
                            }
                        }
                        steps {
                            script {
                                def weightGreen = NodeSelection == 'Green' ? 0 : 1
                                def weightBlue = NodeSelection == 'Green' ? 1 : 0
                                
                                withCredentials([
                                    usernamePassword(
                                        credentialsId: "${AWS_CREDENTIALS_ID}",
                                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                                    )
                                ]) {
                                    sh """
                                        AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} aws elbv2 modify-listener --listener-arn ${listenerARN} --default-actions '[{"Type": "forward","Order": 1,"ForwardConfig": {"TargetGroups": [{"TargetGroupArn": "${greenARN}", "Weight": ${weightGreen} },{"TargetGroupArn": "${blueARN}", "Weight": ${weightBlue} }],"TargetGroupStickinessConfig": {"Enabled": true,"DurationSeconds": 1}}}]'
                                    """
                                }
                            }
                        }
                    }
                    stage('Run on all nodes') {
                        steps {
                            script {
                                def nodes = NodeSelection == 'Green' ? nodesByLabel('green-tg') : nodesByLabel('blue-tg')
                                
                                nodes.each { nodeName ->
                                    node(nodeName) {
                                        checkout([$class: 'GitSCM', branches: [[name: '*/jenkins']], userRemoteConfigs: [[url: "${REPO_URL}"]]])
                                        dir("${REPO_DIR}/Jenkins/Blue-Green-Deployment/${NodeSelection.toLowerCase()}-mongo") {
                                            sh 'docker-compose up -d --no-deps --build nodejs-todo-mongo'
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}