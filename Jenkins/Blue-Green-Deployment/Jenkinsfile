pipeline {
  agent any
  parameters {
    choice (name: 'chooseNode', choices: ['Green', 'Blue'], description: 'Choose which Environment to Deploy: ')
  }
  environment {
    listenerARN = 'arn:aws:elasticloadbalancing:us-east-1:773314055569:listener/app/blue-green-alb/e66a44af6d7d6725/7cb9646d02d73693'
    blueARN = 'arn:aws:elasticloadbalancing:us-east-1:773314055569:targetgroup/blue-tg/fda570ba9fa0ba4b'
    greenARN = 'arn:aws:elasticloadbalancing:us-east-1:773314055569:targetgroup/green-tg/e41e1918562904c9'
    REPO_URL = 'https://github.com/kjakedev/PCC-DevOps-Bootcamp'
    REPO_DIR = '/home/ec2-user/PCC-DevOps-Bootcamp'
    AWS_CREDENTIALS_ID = 'aws-credentials'
  }
    stages {
        stage('Deployment Started') {
            stages {
                stage('Configure Listener') {
                    when {
                        expression {
                            params.chooseNode == 'Green' || params.chooseNode == 'Blue'
                        }
                    }
                    steps {
                        script {
                            def weightGreen = params.chooseNode == 'Green' ? 0 : 1
                            def weightBlue = params.chooseNode == 'Green' ? 1 : 0

                            withCredentials([
                                usernamePassword(
                                    credentialsId: "${AWS_CREDENTIALS_ID}",
                                    usernameVariable: 'AWS_ACCESS_KEY_ID',
                                    passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                                )
                            ]) {
                                sh """
                                    AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} aws elbv2 modify-listener --listener-arn ${listenerARN} --default-actions '[{"Type": "forward","Order": 1,"ForwardConfig": {"TargetGroups": [{"TargetGroupArn": "${greenARN}", "Weight": ${weightGreen} },{"TargetGroupArn": "${blueARN}", "Weight": ${weightBlue} }],"TargetGroupStickinessConfig": {"Enabled": true,"DurationSeconds": 1}}}]'
                                """
                            }
                        }
                    }
                }
                stage('Run on all selected nodes') {
                    matrix {
                        axes {
                            axis {
                                name 'NodeLabel'
                                values params.chooseNode == 'Green' ? 'green-tg' : 'blue-tg'
                            }
                        }
                        stages {
                            stage('Checkout and Build') {
                                steps {
                                    script {
                                        def directory = params.chooseNode == 'Green' ? 'green-mongo':'blue-mysql'
                                        def composeName = params.chooseNode == 'Green' ? 'nodejs-todo-mongo':'nodejs-todo-mysql'
                                        node("${NodeLabel}") {
                                            dir("${REPO_DIR}") {
                                                git branch: 'jenkins', url: "${REPO_URL}"
                                            }
                                            dir("${REPO_DIR}/Jenkins/Blue-Green-Deployment/${directory}") {
                                                sh 'docker-compose up -d --no-deps --build ${composeName}'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}